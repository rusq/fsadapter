// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rusq/fsadapter (interfaces: FSCloser)
//
// Generated by this command:
//
//	mockgen -destination mocks/mock_fsadapter/mock_fs.go github.com/rusq/fsadapter FSCloser
//
// Package mock_fsadapter is a generated GoMock package.
package mock_fsadapter

import (
	io "io"
	fs "io/fs"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFSCloser is a mock of FSCloser interface.
type MockFSCloser struct {
	ctrl     *gomock.Controller
	recorder *MockFSCloserMockRecorder
}

// MockFSCloserMockRecorder is the mock recorder for MockFSCloser.
type MockFSCloserMockRecorder struct {
	mock *MockFSCloser
}

// NewMockFSCloser creates a new mock instance.
func NewMockFSCloser(ctrl *gomock.Controller) *MockFSCloser {
	mock := &MockFSCloser{ctrl: ctrl}
	mock.recorder = &MockFSCloserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFSCloser) EXPECT() *MockFSCloserMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFSCloser) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFSCloserMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFSCloser)(nil).Close))
}

// Create mocks base method.
func (m *MockFSCloser) Create(arg0 string) (io.WriteCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(io.WriteCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFSCloserMockRecorder) Create(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFSCloser)(nil).Create), arg0)
}

// WriteFile mocks base method.
func (m *MockFSCloser) WriteFile(arg0 string, arg1 []byte, arg2 fs.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFile", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFile indicates an expected call of WriteFile.
func (mr *MockFSCloserMockRecorder) WriteFile(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFile", reflect.TypeOf((*MockFSCloser)(nil).WriteFile), arg0, arg1, arg2)
}
